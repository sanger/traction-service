schema {
  query: QueryTypes
  mutation: MutationTypes
}

"""
Autogenerated input type of CreateCovidLibrariesMutation
"""
input CreateCovidLibrariesMutationInput {
  arguments: LibraryCreationArgumentsInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateCovidLibrariesMutation
"""
type CreateCovidLibrariesMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  tubes: [Tube!]
}

"""
Autogenerated input type of CreatePlateWithCovidSamplesMutation
"""
input CreatePlateWithCovidSamplesMutationInput {
  arguments: PlateWithSamplesInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreatePlateWithCovidSamplesMutation
"""
type CreatePlateWithCovidSamplesMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  plate: Plate
}

type Library {
  createdAt: String!
  id: ID!
  name: String!
  plateBarcode: String!
  pool: Int!
  poolSize: Int!
  tubeBarcode: String
  updatedAt: String!
}

input LibraryCreationArgumentsInput {
  plateBarcode: String
}

union MaterialUnion = Library | Request

type MutationTypes {
  createCovidLibraries(input: CreateCovidLibrariesMutationInput!): CreateCovidLibrariesMutationPayload
  createPlateWithCovidSamples(input: CreatePlateWithCovidSamplesMutationInput!): CreatePlateWithCovidSamplesMutationPayload
}

type Plate {
  barcode: String!
  createdAt: String!
  id: ID!
  updatedAt: String!
  wells: [Well!]!
}

input PlateWithSamplesInput {
  barcode: String
  wells: [WellWithSampleInput!]!
}

type QueryTypes {
  """
  Find all Ont Libraries.
  """
  ontLibraries: [Library!]!

  """
  Find all Plates.
  """
  plates: [Plate!]!

  """
  Find a Well by ID.
  """
  well(id: ID!): Well

  """
  Find all Wells.
  """
  wells(plateId: Int): [Well!]!
}

type Request {
  createdAt: String!
  externalId: String!
  id: ID!
  name: String!
  updatedAt: String!
}

input SampleInput {
  externalId: String
  name: String
  tagOligo: String
}

type Tube {
  barcode: String!
  createdAt: String!
  id: ID!
  materials: [MaterialUnion!]
  updatedAt: String!
}

type Well {
  createdAt: String!
  id: ID!
  materials: [MaterialUnion!]
  plateId: Int!
  position: String!
  updatedAt: String!
}

input WellWithSampleInput {
  position: String
  sample: SampleInput
}