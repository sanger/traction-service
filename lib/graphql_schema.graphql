schema {
  query: QueryTypes
  mutation: MutationTypes
}

"""
Autogenerated input type of CreateCovidLibrariesMutation
"""
input CreateCovidLibrariesMutationInput {
  """
  Arguments describing the source for libraries to be created.
  """
  arguments: LibraryCreationArgumentsInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateCovidLibrariesMutation
"""
type CreateCovidLibrariesMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  An array of error messages thrown when creating libraries.
  """
  errors: [String!]!

  """
  An array of tubes containing the generated libraries, or null if errors were thrown.
  """
  tubes: [Tube!]
}

"""
Autogenerated input type of CreateCovidRunMutation
"""
input CreateCovidRunMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  An array of flowcells to include in the run.
  """
  flowcells: [FlowcellInput!]!
}

"""
Autogenerated return type of CreateCovidRunMutation
"""
type CreateCovidRunMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  An array of error messages thrown while creating the run.
  """
  errors: [String!]!

  """
  The generated Run, or null if errors were thrown.
  """
  run: Run
}

"""
Autogenerated input type of CreatePlateWithCovidSamplesMutation
"""
input CreatePlateWithCovidSamplesMutationInput {
  """
  Arguments describing the plate, wells and samples to create a plate for.
  """
  arguments: PlateWithSamplesInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreatePlateWithCovidSamplesMutation
"""
type CreatePlateWithCovidSamplesMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  An array of error messages thrown when creating the plate.
  """
  errors: [String!]!

  """
  The generated plate, or nil if errors were thrown.
  """
  plate: Plate
}

type Flowcell {
  """
  The time this object was created.
  """
  createdAt: String!

  """
  The unique database ID of this object.
  """
  id: ID!

  """
  The library loaded onto this flowcell.
  """
  library: Library!

  """
  The numerical position of this flowcell in the GridION machine.
  """
  position: Int!

  """
  The time this object was last updated.
  """
  updatedAt: String!

  """
  The UUID of this flowcell.
  """
  uuid: String!
}

input FlowcellInput {
  """
  The name of the library to be loaded in this flowcell.
  """
  libraryName: String

  """
  The numerical position of this flowcell in the GriION machine
  """
  position: Int
}

type Library {
  """
  The time this object was created.
  """
  createdAt: String!

  """
  The unique database ID of this object.
  """
  id: ID!

  """
  The name of this library.
  """
  name: String!

  """
  The barcode of the plate this library was created from.
  """
  plateBarcode: String!

  """
  An index of the group of wells combined from the plate to form this library.
  """
  pool: Int!

  """
  The number of samples contained in this library.
  """
  poolSize: Int!

  """
  The barcode of the tube this library is contained in.
  """
  tubeBarcode: String

  """
  The time this object was last updated.
  """
  updatedAt: String!
}

input LibraryCreationArgumentsInput {
  """
  The barcode of the plate to create libraries from.
  """
  plateBarcode: String
}

union MaterialUnion = Library | Request

type MutationTypes {
  """
  Create a library from a 96-well plate containing Covid samples.
  """
  createCovidLibraries(input: CreateCovidLibrariesMutationInput!): CreateCovidLibrariesMutationPayload

  """
  Create a GridION run containing up to five flow cells loaded with Covid libraries.
  """
  createCovidRun(input: CreateCovidRunMutationInput!): CreateCovidRunMutationPayload

  """
  Create a plate with a single Covid sample per well.
  """
  createPlateWithCovidSamples(input: CreatePlateWithCovidSamplesMutationInput!): CreatePlateWithCovidSamplesMutationPayload

  """
  Update an existing GridION run with new properties.
  """
  updateCovidRun(input: UpdateCovidRunMutationInput!): UpdateCovidRunMutationPayload
}

type Plate {
  """
  The barcode of this plate.
  """
  barcode: String!

  """
  The time this object was created.
  """
  createdAt: String!

  """
  The unique database ID of this object.
  """
  id: ID!

  """
  The time this object was last updated.
  """
  updatedAt: String!

  """
  An array of wells that exist on this plate.
  """
  wells: [Well!]!
}

input PlateWithSamplesInput {
  """
  The barcode of the plate.  If not specified, a barcode will be generated.
  """
  barcode: String

  """
  An array of wells on the plate.
  """
  wells: [WellWithSampleInput!]!
}

type QueryTypes {
  """
  Find all Ont Libraries.
  """
  ontLibraries(
    """
    Whether to only include libraries that haven't been loaded into flowcells yet.  Default: false.
    """
    unassignedToFlowcells: Boolean
  ): [Library!]!

  """
  Find an Ont Run by ID.
  """
  ontRun(
    """
    The ID of the Ont Run to find.
    """
    id: ID!
  ): Run

  """
  Find all Ont Runs.
  """
  ontRuns: [Run!]!

  """
  Find all Plates.
  """
  plates: [Plate!]!

  """
  Find a Well by ID.
  """
  well(
    """
    The ID of the Well to find.
    """
    id: ID!
  ): Well

  """
  Find all Wells.
  """
  wells(
    """
    The Plate ID to fetch wells for.
    """
    plateId: ID
  ): [Well!]!
}

type Request {
  """
  The time this object was created.
  """
  createdAt: String!

  """
  The external ID of the sample in this request.
  """
  externalId: String!

  """
  The unique database ID of this object.
  """
  id: ID!

  """
  The name of the sample in this request.
  """
  name: String!

  """
  The time this object was last updated.
  """
  updatedAt: String!
}

type Run {
  """
  The time this object was created.
  """
  createdAt: String!

  """
  The date this run was deactivated.
  """
  deactivatedAt: String

  """
  An array of flowcells in this run.
  """
  flowcells: [Flowcell!]!

  """
  The unique database ID of this object.
  """
  id: ID!

  """
  The state of this run.
  """
  state: RunStateEnum!

  """
  The time this object was last updated.
  """
  updatedAt: String!
}

input RunInput {
  """
  An array of flowcells to assign to the run.
  """
  flowcells: [FlowcellInput!]

  """
  The state for the run.
  """
  state: RunStateEnum
}

enum RunStateEnum {
  """
  The run has been cancelled.
  """
  CANCELLED

  """
  The run has completed.
  """
  COMPLETED

  """
  The run is awaiting to be started.
  """
  PENDING

  """
  The run is currently running but not yet completed.
  """
  STARTED
}

input SampleInput {
  """
  The external ID for the sample.
  """
  externalId: String

  """
  The name of the sample.
  """
  name: String

  """
  The oligo sequence used to tag the sample.
  """
  tagOligo: String
}

type Tube {
  """
  The barcode of this tube.
  """
  barcode: String!

  """
  The time this object was created.
  """
  createdAt: String!

  """
  The unique database ID of this object.
  """
  id: ID!

  """
  The materials contained in this tube.
  """
  materials: [MaterialUnion!]

  """
  The time this object was last updated.
  """
  updatedAt: String!
}

"""
Autogenerated input type of UpdateCovidRunMutation
"""
input UpdateCovidRunMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Ont Run to update.
  """
  id: ID!

  """
  The properties to update on the run.
  """
  properties: RunInput!
}

"""
Autogenerated return type of UpdateCovidRunMutation
"""
type UpdateCovidRunMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  An array of error messages thrown while updating the run.
  """
  errors: [String!]!

  """
  The updated Run, or null if errors were thrown.
  """
  run: Run
}

type Well {
  """
  The time this object was created.
  """
  createdAt: String!

  """
  The unique database ID of this object.
  """
  id: ID!

  """
  The materials contained within this well.
  """
  materials: [MaterialUnion!]

  """
  The ID of the plate this well belongs to.
  """
  plateId: ID!

  """
  The description of the position for this well on the plate.
  """
  position: String!

  """
  The time this object was last updated.
  """
  updatedAt: String!
}

input WellWithSampleInput {
  """
  The description of the position of the well.  Typically A1 through to H12.
  """
  position: String

  """
  The sample contained in the well.
  """
  sample: SampleInput
}