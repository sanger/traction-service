schema {
  query: QueryTypes
  mutation: MutationTypes
}

"""
Autogenerated input type of CreateOntLibrariesMutation
"""
input CreateOntLibrariesMutationInput {
  """
  Arguments describing the source for libraries to be created.
  """
  arguments: LibraryCreationArgumentsInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateOntLibrariesMutation
"""
type CreateOntLibrariesMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  An array of error messages thrown when creating libraries.
  """
  errors: [String!]!

  """
  An array of tubes containing the generated libraries, or null if errors were thrown.
  """
  tubes: [Tube!]
}

"""
Autogenerated input type of CreateOntRunMutation
"""
input CreateOntRunMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  An array of flowcells to include in the run.
  """
  flowcells: [FlowcellInput!]!

  """
  The study type for the run (not currently used).
  """
  studyType: StudyTypeEnum
}

"""
Autogenerated return type of CreateOntRunMutation
"""
type CreateOntRunMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  An array of error messages thrown while creating the run.
  """
  errors: [String!]!

  """
  The generated Run, or null if errors were thrown.
  """
  run: Run
}

"""
Autogenerated input type of CreatePlateWithSamplesMutation
"""
input CreatePlateWithSamplesMutationInput {
  """
  Arguments describing the plate, wells and samples to create a plate for.
  """
  arguments: PlateWithSamplesInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The study type for the samples (not currently used).
  """
  studyType: StudyTypeEnum
}

"""
Autogenerated return type of CreatePlateWithSamplesMutation
"""
type CreatePlateWithSamplesMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  An array of error messages thrown when creating the plate.
  """
  errors: [String!]!

  """
  The generated plate, or nil if errors were thrown.
  """
  plate: Plate
}

"""
Autogenerated input type of DeleteOntLibraryMutation
"""
input DeleteOntLibraryMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the library to delete.
  """
  libraryName: String!
}

"""
Autogenerated return type of DeleteOntLibraryMutation
"""
type DeleteOntLibraryMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  An array of error messages thrown when deleting the library.
  """
  errors: [String!]!

  """
  Whether the library was successfully deleted.
  """
  success: Boolean!
}

type Flowcell {
  """
  The time this object was created.
  """
  createdAt: String!

  """
  The unique database ID of this object.
  """
  id: ID!

  """
  The library loaded onto this flowcell.
  """
  library: Library!

  """
  The numerical position of this flowcell in the GridION machine.
  """
  position: Int!

  """
  The time this object was last updated.
  """
  updatedAt: String!

  """
  The UUID of this flowcell.
  """
  uuid: String!
}

input FlowcellInput {
  """
  The name of the library to be loaded in this flowcell.
  """
  libraryName: String

  """
  The numerical position of this flowcell in the GriION machine
  """
  position: Int
}

type Library {
  """
  The time this object was created.
  """
  createdAt: String!

  """
  The unique database ID of this object.
  """
  id: ID!

  """
  The name of this library.
  """
  name: String!

  """
  The barcode of the plate this library was created from.
  """
  plateBarcode: String!

  """
  An index of the group of wells combined from the plate to form this library.
  """
  pool: Int!

  """
  The number of samples contained in this library.
  """
  poolSize: Int!

  """
  The barcode of the tube this library is contained in.
  """
  tubeBarcode: String

  """
  The time this object was last updated.
  """
  updatedAt: String!
}

input LibraryCreationArgumentsInput {
  """
  The barcode of the plate to create libraries from.
  """
  plateBarcode: String
}

union MaterialUnion = Library | Request

type MutationTypes {
  """
  Create an ONT library from a 96-well plate containing samples.
  """
  createOntLibraries(input: CreateOntLibrariesMutationInput!): CreateOntLibrariesMutationPayload

  """
  Create a GridION run containing up to five flow cells loaded with ONT libraries.
  """
  createOntRun(input: CreateOntRunMutationInput!): CreateOntRunMutationPayload

  """
  Create a plate with a single sample per well.
  """
  createPlateWithSamples(input: CreatePlateWithSamplesMutationInput!): CreatePlateWithSamplesMutationPayload

  """
  Delete an ONT library and containing tube
  """
  deleteOntLibrary(input: DeleteOntLibraryMutationInput!): DeleteOntLibraryMutationPayload

  """
  Update an existing GridION run with new properties.
  """
  updateOntRun(input: UpdateOntRunMutationInput!): UpdateOntRunMutationPayload
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  The currently returned page of results.
  """
  currentPage: Int!

  """
  The total number of entities in the database.
  """
  entitiesCount: Int!

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  The number of pages available at the current page size.
  """
  pageCount: Int!
}

type Plate {
  """
  The barcode of this plate.
  """
  barcode: String!

  """
  The time this object was created.
  """
  createdAt: String!

  """
  The unique database ID of this object.
  """
  id: ID!

  """
  The time this object was last updated.
  """
  updatedAt: String!

  """
  An array of wells that exist on this plate.
  """
  wells: [Well!]!
}

"""
The connection type for Plate.
"""
type PlateConnection {
  """
  A list of edges.
  """
  edges: [PlateEdge]

  """
  A list of nodes.
  """
  nodes: [Plate]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type PlateEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Plate
}

input PlateWithSamplesInput {
  """
  The barcode of the plate.  If not specified, a barcode will be generated.
  """
  barcode: String

  """
  An array of wells on the plate.
  """
  wells: [WellWithSampleInput!]!
}

type QueryTypes {
  """
  Find all Ont Libraries.
  """
  ontLibraries(
    """
    Whether to only include libraries that haven't been loaded into flowcells yet.  Default: false.
    """
    unassignedToFlowcells: Boolean
  ): [Library!]!

  """
  Find an Ont Run by ID.
  """
  ontRun(
    """
    The ID of the Ont Run to find.
    """
    id: ID!
  ): Run

  """
  Find all Ont Runs by page.
  """
  ontRuns(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The page number to return Ont Runs for.
    """
    pageNum: Int

    """
    The number of Ont Runs to return per page.
    """
    pageSize: Int
  ): RunConnection!

  """
  Find all Plates by page.
  """
  plates(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The page number to return plates for.
    """
    pageNum: Int

    """
    The number of plates to return per page.
    """
    pageSize: Int
  ): PlateConnection!

  """
  Find a Well by ID.
  """
  well(
    """
    The ID of the Well to find.
    """
    id: ID!
  ): Well

  """
  Find all Wells.
  """
  wells(
    """
    The Plate ID to fetch wells for.
    """
    plateId: ID
  ): [Well!]!
}

type Request {
  """
  The time this object was created.
  """
  createdAt: String!

  """
  The external ID of the sample in this request.
  """
  externalId: String!

  """
  The unique database ID of this object.
  """
  id: ID!

  """
  The name of the sample in this request.
  """
  name: String!

  """
  The time this object was last updated.
  """
  updatedAt: String!
}

type Run {
  """
  The time this object was created.
  """
  createdAt: String!

  """
  The date this run was deactivated.
  """
  deactivatedAt: String

  """
  The experiment name of this run.
  """
  experimentName: String!

  """
  An array of flowcells in this run.
  """
  flowcells: [Flowcell!]!

  """
  The unique database ID of this object.
  """
  id: ID!

  """
  The state of this run.
  """
  state: RunStateEnum!

  """
  The time this object was last updated.
  """
  updatedAt: String!
}

"""
The connection type for Run.
"""
type RunConnection {
  """
  A list of edges.
  """
  edges: [RunEdge]

  """
  A list of nodes.
  """
  nodes: [Run]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type RunEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Run
}

input RunInput {
  """
  An array of flowcells to assign to the run.
  """
  flowcells: [FlowcellInput!]

  """
  The state for the run.
  """
  state: RunStateEnum
}

enum RunStateEnum {
  """
  The run has been cancelled.
  """
  CANCELLED

  """
  The run has completed.
  """
  COMPLETED

  """
  The run is awaiting to be started.
  """
  PENDING

  """
  The run is currently running but not yet completed.
  """
  STARTED
}

input SampleInput {
  """
  The external ID for the sample.
  """
  externalId: String

  """
  The name of the sample.
  """
  name: String

  """
  The oligo sequence used to tag the sample.
  """
  tagOligo: String
}

enum StudyTypeEnum {
  """
  A Covid-19 study.
  """
  COVID
}

type Tube {
  """
  The barcode of this tube.
  """
  barcode: String!

  """
  The time this object was created.
  """
  createdAt: String!

  """
  The unique database ID of this object.
  """
  id: ID!

  """
  The materials contained in this tube.
  """
  materials: [MaterialUnion!]

  """
  The time this object was last updated.
  """
  updatedAt: String!
}

"""
Autogenerated input type of UpdateOntRunMutation
"""
input UpdateOntRunMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Ont Run to update.
  """
  id: ID!

  """
  The properties to update on the run.
  """
  properties: RunInput!
}

"""
Autogenerated return type of UpdateOntRunMutation
"""
type UpdateOntRunMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  An array of error messages thrown while updating the run.
  """
  errors: [String!]!

  """
  The updated Run, or null if errors were thrown.
  """
  run: Run
}

type Well {
  """
  The time this object was created.
  """
  createdAt: String!

  """
  The unique database ID of this object.
  """
  id: ID!

  """
  The materials contained within this well.
  """
  materials: [MaterialUnion!]

  """
  The ID of the plate this well belongs to.
  """
  plateId: ID!

  """
  The description of the position for this well on the plate.
  """
  position: String!

  """
  The time this object was last updated.
  """
  updatedAt: String!
}

input WellWithSampleInput {
  """
  The description of the position of the well.  Typically A1 through to H12.
  """
  position: String

  """
  The sample contained in the well.
  """
  sample: SampleInput
}